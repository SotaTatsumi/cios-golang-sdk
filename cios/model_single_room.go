/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// SingleRoom struct for SingleRoom
type SingleRoom struct {
	Room Room `json:"room"`
}

// NewSingleRoom instantiates a new SingleRoom object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleRoom(room Room, ) *SingleRoom {
	this := SingleRoom{}
	this.Room = room
	return &this
}

// NewSingleRoomWithDefaults instantiates a new SingleRoom object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleRoomWithDefaults() *SingleRoom {
	this := SingleRoom{}
	return &this
}

// GetRoom returns the Room field value
func (o *SingleRoom) GetRoom() Room {
	if o == nil  {
		var ret Room
		return ret
	}

	return o.Room
}

// GetRoomOk returns a tuple with the Room field value
// and a boolean to check if the value has been set.
func (o *SingleRoom) GetRoomOk() (*Room, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Room, true
}

// SetRoom sets field value
func (o *SingleRoom) SetRoom(v Room) {
	o.Room = v
}

func (o SingleRoom) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["room"] = o.Room
	}
	return json.Marshal(toSerialize)
}

type NullableSingleRoom struct {
	value *SingleRoom
	isSet bool
}

func (v NullableSingleRoom) Get() *SingleRoom {
	return v.value
}

func (v *NullableSingleRoom) Set(val *SingleRoom) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleRoom) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleRoom) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleRoom(val *SingleRoom) *NullableSingleRoom {
	return &NullableSingleRoom{value: val, isSet: true}
}

func (v NullableSingleRoom) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleRoom) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


