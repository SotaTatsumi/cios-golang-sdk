/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// RsaPublicKey struct for RsaPublicKey
type RsaPublicKey struct {
	RsaPublickey string `json:"rsa_publickey"`
}

// NewRsaPublicKey instantiates a new RsaPublicKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRsaPublicKey(rsaPublickey string, ) *RsaPublicKey {
	this := RsaPublicKey{}
	this.RsaPublickey = rsaPublickey
	return &this
}

// NewRsaPublicKeyWithDefaults instantiates a new RsaPublicKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRsaPublicKeyWithDefaults() *RsaPublicKey {
	this := RsaPublicKey{}
	return &this
}

// GetRsaPublickey returns the RsaPublickey field value
func (o *RsaPublicKey) GetRsaPublickey() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.RsaPublickey
}

// GetRsaPublickeyOk returns a tuple with the RsaPublickey field value
// and a boolean to check if the value has been set.
func (o *RsaPublicKey) GetRsaPublickeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RsaPublickey, true
}

// SetRsaPublickey sets field value
func (o *RsaPublicKey) SetRsaPublickey(v string) {
	o.RsaPublickey = v
}

func (o RsaPublicKey) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["rsa_publickey"] = o.RsaPublickey
	}
	return json.Marshal(toSerialize)
}

type NullableRsaPublicKey struct {
	value *RsaPublicKey
	isSet bool
}

func (v NullableRsaPublicKey) Get() *RsaPublicKey {
	return v.value
}

func (v *NullableRsaPublicKey) Set(val *RsaPublicKey) {
	v.value = val
	v.isSet = true
}

func (v NullableRsaPublicKey) IsSet() bool {
	return v.isSet
}

func (v *NullableRsaPublicKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRsaPublicKey(val *RsaPublicKey) *NullableRsaPublicKey {
	return &NullableRsaPublicKey{value: val, isSet: true}
}

func (v NullableRsaPublicKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRsaPublicKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


